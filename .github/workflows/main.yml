name: "Create Release"
on:
  workflow_dispatch:
  push:
    branches:
      - master
jobs:
  create-gh-release:
    name: "Create Release"
    runs-on: ubuntu-latest
    outputs:
      release-url: ${{ steps.create_release.outputs.html_url}}
      release-number: ${{ steps.release-number.outputs.release-number}}
    steps:
      - name: "Checkout"
        uses: actions/checkout@master
      - name: generate release number
        id: release-number
        uses: mindbox-moscow/gha-release-number@v1.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Create GitHub Release"
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release-number.outputs.release-number }}
          release_name: Release ${{ steps.release-number.outputs.release-number }}
          draft: false
          prerelease: false
  create-octopus-release:
    name: "Create Octopus Release"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        octopus-project:
          - "Project1"
    steps:
      - name: "Checkout"
        uses: actions/checkout@master
      - run: env && echo ${{ github.event.commits[0].message }} && echo ${{ github.event.commits.message }}
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - name: Octopus Deploy
        uses: docker://octopusdeploy/octo
        env:
          OCTOPUS_URL: ${{ secrets.OCTOPUS_SERVER_URL }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
          OCTOPUS_SPACE_NAME: "Spaces-1"
      - run: |
          git log -1 --pretty=oneline
          commitMessage=$(git log -1 --pretty=oneline)
          echo $commitMessage
          jsonBody='{
            BuildEnvironment = "GitHub Actions"
            Branch = "${env:BRANCH_NAME}"
            BuildNumber = "${env:GITHUB_RUN_NUMBER}"
            BuildUrl = "https://github.com/${env:GITHUB_REPOSITORY}/actions/runs/${env:GITHUB_RUN_ID}"
            VcsCommitNumber = "${env:GITHUB_SHA}"
            VcsType = "Git"
            VcsRoot = "https://github.com/${env:GITHUB_REPOSITORY}.git"
            Commits = (
              {
                Id = "${env:GITHUB_SHA}"
                LinkUrl = "https://github.com/${env:GITHUB_REPOSITORY}/commit/${env:GITHUB_SHA}"
                Comment = $commitMessage
              }
            )
          }'
          echo $jsonBody > hello-world.1.0.0.zip.json
          readlink -f hello-world.1.0.0.zip.json
          echo "======================="
      - name: "Create ${{ matrix.octopus-project }} Octopus Release First"
        uses: docker://octopusdeploy/octo
        with:
          args: >
            build-information --package-id="hello-world.1.0.1.zip.json" --file="hello-world.1.0.0.zip.json" --version="hello-world.1.0.0.zip" --server=${{ secrets.OCTOPUS_SERVER_URL }} --apiKey=${{ secrets.OCTOPUS_API_KEY }} --space="Spaces-1"
      - name: "Create ${{ matrix.octopus-project }} Octopus Release Second"
        uses: docker://octopusdeploy/octo
        with:
          args: >
            octo create-release --project="Project1" --packageVersion="1124"  --releaseNumber="12412" --server=${{ secrets.OCTOPUS_SERVER_URL }} --apiKey=${{ secrets.OCTOPUS_API_KEY }} --space="Spaces-1"